# This file defines the Kubernetes objects necessary for Enterprise Gateway to run within Kubernetes.
#
apiVersion: v1
kind: Namespace
metadata:
  name: jupyterlab
  labels:
    app: jupyterlab
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jupyterlab-sa
  namespace: jupyterlab
  labels:
    app: jupyterlab
    component: jupyterlab
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: jupyterlab-controller
  labels:
    app: jupyterlab
    component: jupyterlab
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces", "services", "configmaps", "secrets", "persistentvolumes", "persistentvolumeclaims"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["rolebindings"]
    verbs: ["get", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  # Referenced by EG_KERNEL_CLUSTER_ROLE below
  name: kernel-controller
  labels:
    app: k8s-kernel-provider
    component: kernel
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: jupyterlab-controller
  labels:
    app: jupyterlab
    component: jupyterlab
subjects:
  - kind: ServiceAccount
    name: jupyterlab-sa
    namespace: jupyterlab
roleRef:
  kind: ClusterRole
  name: jupyterlab-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: jupyterlab
    component: jupyterlab
  name: jupyterlab
  namespace: jupyterlab
spec:
  ports:
  - name: http
    port: 8888
    targetPort: 8888
  selector:
    nb-selector: jupyterlab
  sessionAffinity: ClientIP
  type: NodePort
# Uncomment in order to use <k8s-master>:8888
#  externalIPs:
#  - k8s-master-public-ip
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: jupyterlab
  namespace: jupyterlab
  labels:
    nb-selector: jupyterlab
    app: jupyterlab
    component: jupyterlab
spec:
# Uncomment/Update to deploy multiple replicas of EG
#  replicas: 1
  selector:
    matchLabels:
      nb-selector: jupyterlab
  template:
    metadata:
      labels:
        nb-selector: jupyterlab
        app: jupyterlab
        component: jupyterlab
    spec:
      # Created above.
      serviceAccountName: jupyterlab-sa
      containers:
      - env:
        # EG_PORT won't be picked up.
        # I believe we exposed the notebook port via an env within the last year (JUPYTER_PORT).
        # Not sure if that was ported to server, but needs to b
        - name: EG_PORT
          value: "8888"
        - name: JUPYTER_PORT
          value: "8888"
        - name: EG_NAMESPACE
          value: "jupyterlab"
        # Used if no KERNEL_NAMESPACE is provided by client.
        - name: EG_KERNEL_CLUSTER_ROLE
          value: "kernel-controller"
        # All kernels reside in the EG namespace if True, otherwise KERNEL_NAMESPACE
        # must be provided or one will be created for each kernel.
        - name: EG_SHARED_NAMESPACE
          value: "True"
        # NOTE: This requires appropriate volume mounts to make notebook dir accessible
        - name: EG_MIRROR_WORKING_DIRS
          value: "False"
        # Current idle timeout is 1 hour.
        - name: EG_CULL_IDLE_TIMEOUT
          value: "3600"
        - name: EG_LOG_LEVEL
          value: "DEBUG"
        - name: EG_KERNEL_LAUNCH_TIMEOUT
          value: "60"
        # Generally speaking, all of the EG_-prefixed envs will change.
        # Looking at the code, many are still in use. There are a few, like log level, cull idle timeout that apply to the server (jupyter_server) 
        # and kernel-whitelist currently has no equivalent in provider-land at the moment.        
        - name: EG_KERNEL_WHITELIST
          value: "['r_kubernetes','python_kubernetes','python_tf_kubernetes','python_tf_gpu_kubernetes','scala_kubernetes','spark_r_kubernetes','spark_python_kubernetes','spark_scala_kubernetes']"
        # Ensure the following VERSION tag is updated to the version of Enterprise Gateway you wish to run
        image: jupyter/jlab-k8s-provider-example:0.0.1
        # Use IfNotPresent policy so that dev-based systems don't automatically
        # update. This provides more control.  Since formal tags will be release-specific
        # this policy should be sufficient for them as well.
        imagePullPolicy: IfNotPresent
        name: jupyterlab
        ports:
        - containerPort: 8888
## Uncomment to enable NFS-mounted kernelspecs
#        volumeMounts:
#        - name: kernelspecs
#          mountPath: "/usr/local/share/jupyter/kernels"
#      volumes:
#      - name: kernelspecs
#        nfs:
#          server: <internal-ip-of-nfs-server>
#          path: "/usr/local/share/jupyter/kernels"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kernel-image-puller
  namespace: jupyterlab
spec:
  selector:
    matchLabels:
      name: kernel-image-puller 
  template:
    metadata:
      labels:
        name: kernel-image-puller 
        app: jupyterlab
        component: kernel-image-puller
    spec:
      containers:
      - name: kernel-image-puller
        image: elyra/kernel-image-puller:2.2.0rc2
        env:
          - name: KIP_GATEWAY_HOST
            value: "http://jupyterlab.jupyterlab:8888"
          - name: KIP_INTERVAL
            value: "300"
          - name: KIP_PULL_POLICY
            value: "IfNotPresent"
        volumeMounts:
          - name: dockersock
            mountPath: "/var/run/docker.sock"
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
